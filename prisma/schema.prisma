// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum JobType {
  full_time
  part_time
  contract
  remote
  internship
}

enum ApplicationStatus {
  pending
  reviewed
  shortlisted
  rejected
  hired
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Seeker
  profile Profile?

  applications JobApplication[]
  postedJobs   Job[]
}

model Profile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique @db.ObjectId
  occupation  String?
  resumeUrl   String?
  experience  String?
  education   String?
  description String?
  skills      String[]
  location    String?
  phoneNumber String?
  website     String?
  background  String?
  facebook    String?
  instagram   String?
  linkedin    String?
  twitter     String?
}

model Company {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String   @unique
  password     String
  industry     String?
  companySize  String?
  yearFounded  String?
  founder      String?
  photos       String[]
  headquarters String?
  companyLogo  String?
  specialties  String[]
  website      String?
  description  String?
}

model Job {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  companyId    String           @db.ObjectId
  company      User             @relation(fields: [companyId], references: [id])
  location     String
  type         JobType
  salaryMin    Int?
  salaryMax    Int?
  description  String
  requirements String[]
  postedAt     DateTime         @default(now())
  isActive     Boolean          @default(true)
  applications JobApplication[]
}

model JobApplication {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  userId      String            @db.ObjectId
  user        User              @relation(fields: [userId], references: [id])
  jobId       String            @db.ObjectId
  job         Job               @relation(fields: [jobId], references: [id])
  resumeUrl   String?
  coverLetter String?
  appliedAt   DateTime          @default(now())
  status      ApplicationStatus
}
